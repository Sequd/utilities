using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace CleanBin;

/// <summary>
/// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
/// </summary>
public class EnhancedCleanerService : ICleanerService
{
    private readonly CleanBinOptions _options;
    private readonly CleanupStatistics _statistics;
    private readonly ILogger<EnhancedCleanerService> _logger;
    private readonly IConfigurationProfileManager _profileManager;
    private readonly IFilePreviewService _previewService;
    private readonly IBackupService _backupService;
    private readonly ICacheService _cacheService;

    public EnhancedCleanerService(
        IOptions<CleanBinOptions> options,
        ILogger<EnhancedCleanerService> logger,
        IConfigurationProfileManager profileManager,
        IFilePreviewService previewService,
        IBackupService backupService,
        ICacheService cacheService)
    {
        _options = options.Value;
        _logger = logger;
        _profileManager = profileManager;
        _previewService = previewService;
        _backupService = backupService;
        _cacheService = cacheService;
        _statistics = new CleanupStatistics();
    }

    public OperationResult<IEnumerable<string>> GetDirectories(string path)
    {
        try
        {
            var validationResult = PathValidator.ValidateDirectoryPath(path);
            if (!validationResult.IsSuccess)
                return OperationResult<IEnumerable<string>>.Failure(validationResult.ErrorMessage);

            var directories = Directory.GetDirectories(path, "*", SearchOption.TopDirectoryOnly)
                .Where(d => !PathValidator.IsCriticalSystemPath(d))
                .ToList();

            _logger.LogInformation("–ù–∞–π–¥–µ–Ω–æ {Count} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ {Path}", directories.Count, path);
            return OperationResult<IEnumerable<string>>.Success(directories);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è {Path}", path);
            return OperationResult<IEnumerable<string>>.Failure($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {ex.Message}");
        }
    }

    public async Task<OperationResult<IEnumerable<string>>> GetDirectoriesAsync(string path, CancellationToken cancellationToken = default)
    {
        return await Task.Run(() => GetDirectories(path), cancellationToken);
    }

    public OperationResult<IEnumerable<string>> CleanFolder(string path, bool needSysClean = false, string[]? ignoreDirectories = null, string[]? cleanDirectories = null)
    {
        return CleanFolderAsync(path, needSysClean, ignoreDirectories, cleanDirectories).GetAwaiter().GetResult();
    }

    public async Task<OperationResult<IEnumerable<string>>> CleanFolderAsync(
        string path, 
        bool needSysClean = false, 
        string[]? ignoreDirectories = null, 
        string[]? cleanDirectories = null, 
        CancellationToken cancellationToken = default, 
        IProgress<string>? progress = null)
    {
        var stopwatch = Stopwatch.StartNew();
        _statistics.Reset();

        try
        {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏
            var validationResult = PathValidator.ValidateDirectoryPath(path);
            if (!validationResult.IsSuccess)
                return OperationResult<IEnumerable<string>>.Failure(validationResult.ErrorMessage);

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            var profileResult = await _profileManager.GetActiveProfileAsync(cancellationToken);
            if (!profileResult.IsSuccess)
                return OperationResult<IEnumerable<string>>.Failure(profileResult.ErrorMessage);

            var profile = profileResult.Value ?? await CreateDefaultProfileAsync();

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            progress?.Report("üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...");
            var previewResult = await _previewService.GetPreviewAsync(path, profile, cancellationToken);
            if (!previewResult.IsSuccess)
                return OperationResult<IEnumerable<string>>.Failure(previewResult.ErrorMessage);

            var previewItems = previewResult.Value!.ToList();
            if (!previewItems.Any())
            {
                progress?.Report("‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
                return OperationResult<IEnumerable<string>>.Success(Enumerable.Empty<string>());
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            if (profile.ShowPreview)
            {
                await ShowPreviewAsync(previewItems, progress);
            }

            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            BackupInfo? backupInfo = null;
            if (profile.CreateBackups)
            {
                progress?.Report("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...");
                var backupResult = await _backupService.CreateBackupAsync(
                    previewItems, 
                    profile.BackupPath, 
                    cancellationToken);
                
                if (backupResult.IsSuccess)
                {
                    backupInfo = backupResult.Value;
                    progress?.Report($"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backupInfo.Id}");
                }
                else
                {
                    _logger.LogWarning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {Error}", backupResult.ErrorMessage);
                }
            }

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            if (profile.ConfirmDeletion)
            {
                progress?.Report($"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {previewItems.Count} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (Y/N)");
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            progress?.Report("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...");
            var deletedFiles = await PerformCleanupAsync(previewItems, profile, progress, cancellationToken);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            _statistics.TotalProcessedFolders = 1;
            _statistics.DeletedFolders = deletedFiles.Count;
            _statistics.TotalExecutionTimeMs = stopwatch.ElapsedMilliseconds;
            _statistics.LastCleanupTime = DateTime.UtcNow;

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (profile.EnableCaching)
            {
                await CacheResultsAsync(path, deletedFiles, profile, cancellationToken);
            }

            progress?.Report($"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {deletedFiles.Count} —Ñ–∞–π–ª–æ–≤ –∑–∞ {stopwatch.Elapsed.TotalSeconds:F1}—Å");
            
            return OperationResult<IEnumerable<string>>.Success(deletedFiles);
        }
        catch (OperationCanceledException)
        {
            _logger.LogInformation("–û–ø–µ—Ä–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è {Path}", path);
            return OperationResult<IEnumerable<string>>.Failure("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏ {Path}", path);
            _statistics.Errors++;
            return OperationResult<IEnumerable<string>>.Failure($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {ex.Message}");
        }
        finally
        {
            stopwatch.Stop();
        }
    }

    public CleanupStatistics GetStatistics()
    {
        return _statistics;
    }

    private async Task<ConfigurationProfile> CreateDefaultProfileAsync()
    {
        var defaultProfileResult = await _profileManager.CreateDefaultProfileAsync();
        if (defaultProfileResult.IsSuccess)
        {
            return defaultProfileResult.Value!;
        }
        
        // Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é
        return new ConfigurationProfile
        {
            Name = "Default",
            Description = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            IgnoreDirectories = _options.DefaultIgnoreDirectories,
            CleanDirectories = _options.DefaultCleanDirectories,
            EnableSystemClean = _options.EnableSystemClean,
            LogLevel = _options.LogLevel
        };
    }

    private async Task ShowPreviewAsync(List<FilePreviewItem> previewItems, IProgress<string>? progress)
    {
        var statisticsResult = await _previewService.GetPreviewStatisticsAsync(previewItems);
        if (statisticsResult.IsSuccess)
        {
            var stats = statisticsResult.Value!;
            progress?.Report($"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.TotalFiles} —Ñ–∞–π–ª–æ–≤, {stats.FormattedTotalSize}, {stats.SafeFilesPercentage:F1}% –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É
            var topFiles = previewItems
                .OrderByDescending(f => f.Size)
                .Take(10)
                .ToList();

            progress?.Report("üìã –¢–æ–ø —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:");
            foreach (var file in topFiles)
            {
                var icon = file.GetFileIcon();
                var priority = file.GetPriorityColor();
                var size = file.GetFormattedSize();
                var warnings = file.Warnings.Any() ? $" ‚ö†Ô∏è {string.Join(", ", file.Warnings)}" : "";
                
                progress?.Report($"  {icon} {priority} {file.Name} ({size}){warnings}");
            }
        }
    }

    private async Task<List<string>> PerformCleanupAsync(
        List<FilePreviewItem> previewItems, 
        ConfigurationProfile profile, 
        IProgress<string>? progress, 
        CancellationToken cancellationToken)
    {
        var deletedFiles = new List<string>();
        var safeFiles = previewItems.Where(f => f.IsSafeToDelete).ToList();
        var unsafeFiles = previewItems.Where(f => !f.IsSafeToDelete).ToList();

        if (unsafeFiles.Any())
        {
            _logger.LogWarning("–ü—Ä–æ–ø—É—â–µ–Ω–æ {Count} –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", unsafeFiles.Count);
            progress?.Report($"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ {unsafeFiles.Count} –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤");
        }

        if (profile.EnableParallelProcessing)
        {
            deletedFiles = await PerformParallelCleanupAsync(safeFiles, profile, progress, cancellationToken);
        }
        else
        {
            deletedFiles = await PerformSequentialCleanupAsync(safeFiles, progress, cancellationToken);
        }

        return deletedFiles;
    }

    private async Task<List<string>> PerformParallelCleanupAsync(
        List<FilePreviewItem> files, 
        ConfigurationProfile profile, 
        IProgress<string>? progress, 
        CancellationToken cancellationToken)
    {
        var deletedFiles = new ConcurrentBag<string>();
        var semaphore = new SemaphoreSlim(profile.MaxParallelThreads, profile.MaxParallelThreads);
        
        var tasks = files.Select(async file =>
        {
            await semaphore.WaitAsync(cancellationToken);
            try
            {
                if (File.Exists(file.FullPath))
                {
                    File.Delete(file.FullPath);
                    deletedFiles.Add(file.FullPath);
                    _logger.LogDebug("–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {FilePath}", file.FullPath);
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {FilePath}", file.FullPath);
                _statistics.Errors++;
            }
            finally
            {
                semaphore.Release();
            }
        });

        await Task.WhenAll(tasks);
        return deletedFiles.ToList();
    }

    private async Task<List<string>> PerformSequentialCleanupAsync(
        List<FilePreviewItem> files, 
        IProgress<string>? progress, 
        CancellationToken cancellationToken)
    {
        var deletedFiles = new List<string>();
        
        for (int i = 0; i < files.Count; i++)
        {
            cancellationToken.ThrowIfCancellationRequested();
            
            var file = files[i];
            try
            {
                if (File.Exists(file.FullPath))
                {
                    File.Delete(file.FullPath);
                    deletedFiles.Add(file.FullPath);
                    _logger.LogDebug("–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {FilePath}", file.FullPath);
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {FilePath}", file.FullPath);
                _statistics.Errors++;
            }

            if (i % 10 == 0)
            {
                progress?.Report($"üóëÔ∏è  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{files.Count} —Ñ–∞–π–ª–æ–≤");
            }
        }

        return deletedFiles;
    }

    private async Task CacheResultsAsync(
        string path, 
        List<string> deletedFiles, 
        ConfigurationProfile profile, 
        CancellationToken cancellationToken)
    {
        try
        {
            var cacheKey = $"cleanup_{path.GetHashCode()}";
            var cacheData = new
            {
                Path = path,
                DeletedFiles = deletedFiles,
                Timestamp = DateTime.UtcNow,
                FileCount = deletedFiles.Count
            };

            var expiration = TimeSpan.FromMinutes(profile.CacheLifetimeMinutes);
            await _cacheService.SetAsync(cacheKey, cacheData, expiration, cancellationToken);
            
            _logger.LogDebug("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {Path}", path);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è {Path}", path);
        }
    }
}