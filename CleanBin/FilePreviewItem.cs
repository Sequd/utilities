using System.IO;

namespace CleanBin;

/// <summary>
/// –≠–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞
/// </summary>
public class FilePreviewItem
{
    /// <summary>
    /// –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    /// </summary>
    public string FullPath { get; set; } = string.Empty;

    /// <summary>
    /// –ò–º—è —Ñ–∞–π–ª–∞
    /// </summary>
    public string Name { get; set; } = string.Empty;

    /// <summary>
    /// –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
    /// </summary>
    public long Size { get; set; }

    /// <summary>
    /// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    /// </summary>
    public DateTime CreatedAt { get; set; }

    /// <summary>
    /// –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    /// </summary>
    public DateTime LastModified { get; set; }

    /// <summary>
    /// –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    /// </summary>
    public DateTime LastAccessed { get; set; }

    /// <summary>
    /// –ê—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–∞
    /// </summary>
    public FileAttributes Attributes { get; set; }

    /// <summary>
    /// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    /// </summary>
    public string Extension { get; set; } = string.Empty;

    /// <summary>
    /// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–∞
    /// </summary>
    public string Directory { get; set; } = string.Empty;

    /// <summary>
    /// –ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
    /// </summary>
    public string RemovalReason { get; set; } = string.Empty;

    /// <summary>
    /// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è (1 = –≤—ã—Å–æ–∫–∏–π, 5 = –Ω–∏–∑–∫–∏–π)
    /// </summary>
    public int Priority { get; set; } = 3;

    /// <summary>
    /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ
    /// </summary>
    public bool IsSafeToDelete { get; set; } = true;

    /// <summary>
    /// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    /// </summary>
    public List<string> Warnings { get; set; } = new();

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ FileInfo
    /// </summary>
    public static FilePreviewItem FromFileInfo(FileInfo fileInfo, string removalReason = "–û—á–∏—Å—Ç–∫–∞")
    {
        return new FilePreviewItem
        {
            FullPath = fileInfo.FullName,
            Name = fileInfo.Name,
            Size = fileInfo.Length,
            CreatedAt = fileInfo.CreationTime,
            LastModified = fileInfo.LastWriteTime,
            LastAccessed = fileInfo.LastAccessTime,
            Attributes = fileInfo.Attributes,
            Extension = fileInfo.Extension,
            Directory = fileInfo.DirectoryName ?? string.Empty,
            RemovalReason = removalReason,
            Priority = CalculatePriority(fileInfo),
            IsSafeToDelete = IsFileSafeToDelete(fileInfo),
            Warnings = GetWarnings(fileInfo)
        };
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    /// </summary>
    private static int CalculatePriority(FileInfo fileInfo)
    {
        var extension = fileInfo.Extension.ToLowerInvariant();
        var name = fileInfo.Name.ToLowerInvariant();

        // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (extension == ".tmp" || extension == ".temp" || name.StartsWith("~"))
            return 1;

        // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ª–æ–≥–æ–≤
        if (extension == ".log" || name.Contains("log"))
            return 1;

        // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫—ç—à —Ñ–∞–π–ª–æ–≤
        if (extension == ".cache" || name.Contains("cache"))
            return 2;

        // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (fileInfo.LastWriteTime < DateTime.Now.AddDays(-30))
            return 2;

        // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        return 3;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    /// </summary>
    private static bool IsFileSafeToDelete(FileInfo fileInfo)
    {
        // –ù–µ —É–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (fileInfo.Attributes.HasFlag(FileAttributes.System))
            return false;

        // –ù–µ —É–¥–∞–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö)
        if (fileInfo.Attributes.HasFlag(FileAttributes.Hidden) && 
            !fileInfo.Name.StartsWith("~") && 
            !fileInfo.Extension.Equals(".tmp", StringComparison.OrdinalIgnoreCase))
            return false;

        // –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        if (fileInfo.Attributes.HasFlag(FileAttributes.ReadOnly))
            return false;

        return true;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞
    /// </summary>
    private static List<string> GetWarnings(FileInfo fileInfo)
    {
        var warnings = new List<string>();

        if (fileInfo.Length > 100 * 1024 * 1024) // 100 MB
            warnings.Add("–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª");

        if (fileInfo.LastWriteTime > DateTime.Now.AddDays(-1))
            warnings.Add("–ù–µ–¥–∞–≤–Ω–æ –∏–∑–º–µ–Ω–µ–Ω");

        if (fileInfo.Attributes.HasFlag(FileAttributes.Hidden))
            warnings.Add("–°–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª");

        if (fileInfo.Extension.Equals(".exe", StringComparison.OrdinalIgnoreCase) ||
            fileInfo.Extension.Equals(".dll", StringComparison.OrdinalIgnoreCase))
            warnings.Add("–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª");

        return warnings;
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    /// </summary>
    public string GetFormattedSize()
    {
        return FormatFileSize(Size);
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    /// </summary>
    private static string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number = number / 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    /// </summary>
    public string GetFileIcon()
    {
        return Extension.ToLowerInvariant() switch
        {
            ".tmp" or ".temp" => "üóëÔ∏è",
            ".log" => "üìù",
            ".cache" => "üíæ",
            ".exe" => "‚öôÔ∏è",
            ".dll" => "üì¶",
            ".txt" => "üìÑ",
            ".pdf" => "üìï",
            ".doc" or ".docx" => "üìò",
            ".xls" or ".xlsx" => "üìó",
            ".jpg" or ".jpeg" or ".png" or ".gif" => "üñºÔ∏è",
            ".mp3" or ".wav" or ".flac" => "üéµ",
            ".mp4" or ".avi" or ".mkv" => "üé¨",
            ".zip" or ".rar" or ".7z" => "üì¶",
            _ => "üìÑ"
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    /// </summary>
    public string GetPriorityColor()
    {
        return Priority switch
        {
            1 => "üî¥", // –ö—Ä–∞—Å–Ω—ã–π - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            2 => "üü°", // –ñ–µ–ª—Ç—ã–π - —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            3 => "üü¢", // –ó–µ–ª–µ–Ω—ã–π - –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            _ => "‚ö™"  // –ë–µ–ª—ã–π - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
        };
    }
}